plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-kapt"
    id "kotlin-android-extensions"
    id "dagger.hilt.android.plugin"
    id "androidx.navigation.safeargs.kotlin"
}

// Keystore props for app signing
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    //keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    keystorePropertiesFile?.withInputStream { keystoreProperties.load(it) }
}

// Secure props for API keys
def secureProps = new Properties()
def securePropsFile = rootProject.file('secure.properties')
if (securePropsFile.exists()) {
    securePropsFile?.withInputStream { secureProps.load(it) }
}

// query git for the SHA, Tag and commit count. Use these to automate versioning.
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def gitCommitCount = Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "dev.gitly"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode gitCommitCount
        versionName gitSha
        archivesBaseName = "gitly"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Field for all builds
        buildConfigField "String", "GUEST_TOKEN", "\"$guest_access_token\""
        buildConfigField "String", "RSA_KEY", "\"$licensing_rsa_key\""
        resValue "string", "maps_api_key", (secureProps.getProperty("maps_api_key") ?: "")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString(),
                              "room.incremental"   : "true"]
            }
        }

    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            buildConfigField "String", "BASE_URL", "\"$local_base_url\""
            buildConfigField "String", "GIT_SHA", "\"$gitSha\""
            buildConfigField "String", "CLIENT_ID", "\"$client_id\""
            buildConfigField "String", "CLIENT_SECRET", "\"$client_secret\""
            buildConfigField "String", "AUTH_CALLBACK", "\"$callback\""
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            debuggable true
            buildConfigField "String", "BASE_URL", "\"$live_base_url\""
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
    flavorDimensions 'free', 'paid'
}

dependencies {
    // Core
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha01'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.3.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta7'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.0-alpha03'
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // OkHTTP
    implementation("com.squareup.okhttp3:okhttp:$okhttp_version")
    implementation("com.squareup.okhttp3:logging-interceptor:$okhttp_version")

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'

    // Navigation
    implementation "androidx.navigation:navigation-runtime-ktx:$nav_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Activity KTX
    implementation "androidx.activity:activity-ktx:$activity_version"

    // Fragment KTX
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Lifecycle (LiveData & ViewModel)
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    // Hilt Dagger
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Hilt Jetpack
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_jetpack"
    implementation "androidx.hilt:hilt-work:$hilt_jetpack"
    kapt "androidx.hilt:hilt-compiler:$hilt_jetpack"

    // WorkManager
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // hotfix for WorkManager
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // Billing
    implementation "com.android.billingclient:billing-ktx:$billing_version"

    // Google Auth
    implementation "com.google.android.gms:play-services-auth:18.0.0"

    // Maps
    implementation "com.google.maps.android:maps-ktx:$maps_version"
    implementation "com.google.maps.android:maps-utils-ktx:$maps_version"
    implementation 'com.google.android.gms:play-services-maps:17.0.0'

    // Bypass: HTML link movement
    implementation project(":bypass")

    // Testing
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation "androidx.paging:paging-common-ktx:$paging_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation("com.squareup.okhttp3:mockwebserver:$okhttp_version")
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
}
